// Processing 2.0b6
// Ping-Yeh Li 2014
PFont font;
int sizeX=1280;
int sizeY=1024;
int[][] totalPix= new int[sizeX][sizeY];
import processing.video.*;
// Variable for capture device
Capture video;
// Previous Frame
PImage prevFrame;
// How different must a pixel be to be a "motion" pixel
float threshold = 50;
int exposureFrames= 3000;

void setup() {
  rectMode(CORNER);
  font = loadFont("ArialNarrow-48.vlw");
  background(255);
  //size(sizeX, sizeY);
  size(1280, 1024);
  video = new Capture(this, sizeX, sizeY);
  video.start();
  // Create an empty image the same size as the video
  prevFrame = createImage(video.width, video.height, RGB);

  //make totalPix all to be 0;
  for (int i=0; i<sizeX; i++) {
    for (int j=0; j<sizeY; j++) {
      totalPix[i][j]=0;
    }
  }
}

void draw() {
  // Capture video
  if (video.available()) {
    // Save previous frame for motion detection!!
    prevFrame.copy(video, 0, 0, video.width, video.height, 0, 0, video.width, video.height); 
    // Before we read the new frame, we always save the previous frame for comparison!
    prevFrame.updatePixels();
    video.read();
  }

  loadPixels();
  video.loadPixels();
  prevFrame.loadPixels();

  // Begin loop to walk through every pixel
  for (int x = 0; x < video.width; x ++ ) {
    for (int y = 0; y < video.height; y ++ ) {
      int loc = x + y*video.width;            // Step 1, what is the 1D pixel location
      color current = video.pixels[loc];      // Step 2, what is the current color
      color previous = prevFrame.pixels[loc]; // Step 3, what is the previous color
      // Step 4, compare colors (previous vs. current)
      float r1 = red(current); 
      float g1 = green(current); 
      float b1 = blue(current);
      float r2 = red(previous); 
      float g2 = green(previous); 
      float b2 = blue(previous);
      float diff = dist(r1, g1, b1, r2, g2, b2);
      // Step 5, How different are the colors? // If the color at that pixel has changed, + 1 to it's int value.
      if (diff > threshold) {
        if (totalPix[x][y]<255) {
          totalPix[x][y]=totalPix[x][y]+1;
        }
      }
    }
  }
  //if 10seconds passed, saveData
  if (frameCount==exposureFrames*0.05) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.1) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.15) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.2) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.25) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.3) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.35) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.4) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.45) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.5) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.55) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.6) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.65) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.7) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.75) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.8) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.85) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.9) {
    drawimg();
  }
  if (frameCount==exposureFrames*0.95) {
    drawimg();
  }
  if (frameCount==exposureFrames) {
    saveData();
    drawimg();
    save("MotionCapture/001.png");
    exit();
  }

  if (mousePressed) {
    saveData();
    drawimg();
    save("MotionCapture/001.png");
    exit();
  }

  noStroke();
  fill(200);
  stroke(250);
  strokeWeight(5);
  rect(0, 0, width*0.4, height*0.05);
  fill(250);
  float rectWidth;
  rectWidth= map(frameCount, 0, exposureFrames, 0, width*0.4);
  rect(0, 0, rectWidth, height*0.05);
  fill(50);
  textFont(font, 48);
  text("Exposed Frames= "+ frameCount, 20, 40);
}

// saveData Function
void saveData() {
  // For each pixel make one String to be saved
  String[] data = new String[sizeX*sizeY];

  for (int x=0; x<sizeX; x++) {
    for (int y=0; y<sizeY; y++) {
      data[x+(y*sizeX)] = x + "  " + y + "  " + Integer.toString(totalPix[x][y]);
    }
  }
  saveStrings("data/data011.txt", data);
}

void drawimg() {
  for (int x = 0; x < video.width; x ++ ) {
    for (int y = 0; y < video.height; y ++ ) {
      pixels[x+(y*sizeX)]=color(totalPix[x][y]);
    }
  }
  updatePixels();
}
